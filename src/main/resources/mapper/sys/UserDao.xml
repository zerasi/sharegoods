<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.so.demosboot.modules.sys.dao.UserDao">

    <sql id="userColumns">
        a.id AS "id",
        a.username AS "username",
        a.password AS "password",
        a.role AS "role",
        a.is_block AS "isBlock",
        a.tel AS "tel",
        a.email AS "email",
        a.lend_point AS "lendPoint"
    </sql>

    <sql id="userJoins">
    </sql>

    <select id="getById" resultType="com.so.demosboot.modules.sys.entity.User">
        SELECT
        <include refid="userColumns"/>
        FROM sys_user a
        <include refid="userJoins"/>
        WHERE a.id = #{id}
    </select>

    <select id="login" resultType="com.so.demosboot.modules.sys.entity.User">
        SELECT
        <include refid="userColumns"/>
        FROM sys_user a
        <include refid="userJoins"/>
        WHERE a.username = #{username} and a.password = #{password}
    </select>
    <select id="findListLink" resultType="com.so.demosboot.modules.sys.entity.UserLink">
        SELECT
        usermine,
		userto,
		creattime,
		bak1
        FROM user_link
        WHERE usermine = #{usermine}
    </select>
    <select id="findListExMsg" resultType="com.so.demosboot.modules.sys.entity.UserEx">
        SELECT
        id,
		usermine,
		userto,
		msg,
		createdate,
		bak1,
		bak2
        FROM user_ex
        WHERE userto = #{usermine} or usermine = #{usermine} order by id desc
    </select>
    
    <select id="getByUserName" resultType="com.so.demosboot.modules.sys.entity.User">
        SELECT
        <include refid="userColumns"/>
        FROM sys_user a
        <include refid="userJoins"/>
        WHERE a.username = #{userId}
    </select>

    <select id="findList" resultType="com.so.demosboot.modules.sys.entity.User">
        SELECT
        <include refid="userColumns"/>
        FROM sys_user a
        <include refid="userJoins"/>
        <where>
            a.id != '1'
            <if test="username != null and username != ''">
                AND a.username = #{username}
            </if>
            <if test="role != null and role != ''">
                AND a.role = #{role}
            </if>
            <if test="isBlock != null and isBlock != ''">
                AND a.is_block = #{isBlock}
            </if>
             <if test="tel != null and tel != ''">
                AND a.tel = #{tel}
            </if>
             <if test="email != null and email != ''">
                AND a.email = #{email}
            </if>
        </where>
        <choose>
            <otherwise>
            </otherwise>
        </choose>
    </select>

    <select id="findAllList" resultType="com.so.demosboot.modules.sys.entity.User">
        SELECT
        <include refid="userColumns"/>
        FROM sys_user a
        <include refid="userJoins"/>
        <where>

        </where>
        <choose>
            <otherwise>
            </otherwise>
        </choose>
    </select>

    <insert id="insert">
        INSERT INTO sys_user(
        id,
        username,
        password,
        role,
        is_block,
        tel,
        email,
        lend_point
        ) VALUES (
        #{id},
        #{username},
        #{password},
        #{role},
        #{isBlock},
        #{tel},
        #{email},
        '0'
        )
    </insert>

    <update id="update">
        UPDATE sys_user SET
        username = #{username},
        password = #{password},
        role = #{role},
        is_block = #{isBlock},
        tel = #{tel},
        email = #{email}
        WHERE id = #{id}
    </update>
    
    <update id="update_lendPoint">
        UPDATE sys_user SET
        lend_point = #{lendPoint}
        WHERE id = #{id}
    </update>

    <update id="delete">
        DELETE FROM sys_user
        WHERE id = #{id}
    </update>
    
    <update id="deleteUserEx">
        DELETE FROM user_ex
        WHERE id = #{id}
    </update>
    
    <update id="deleteUserLink">
        DELETE FROM user_link
        WHERE usermine = #{usermine}
			and userto = #{userto}

    </update>

	<insert id="addUserLink">
		INSERT into user_link(usermine,
		userto,
		creattime,
		bak1
		) VALUES(#{usermine},
		#{userto},
		#{creattime},
		#{bak1}
		)
	</insert>
	<insert id="sendMsg">
		INSERT into user_ex(id,
		usermine,
		userto,
		msg,
		createdate,
		bak1,
		bak2

		) VALUES(
		#{id},
		#{usermine},
		#{userto},
		#{msg},
		#{createdate},
		#{bak1},
		#{bak2}

		)
	</insert>
</mapper>